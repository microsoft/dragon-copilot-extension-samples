import { promptOutputDetails, getInputDescription } from '../shared/prompts.js';

// Mock inquirer prompts
jest.mock('@inquirer/prompts', () => ({
  input: jest.fn(),
  select: jest.fn(),
  checkbox: jest.fn(),
  confirm: jest.fn()
}));

import { input } from '@inquirer/prompts';

const mockInput = input as jest.MockedFunction<typeof input>;

describe('Prompts', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('promptOutputDetails', () => {
    test('should use correct default values', async () => {
      mockInput
        .mockResolvedValueOnce('adaptive-card') // name
        .mockResolvedValueOnce('Adaptive card response'); // description

      const result = await promptOutputDetails();

      expect(result).toEqual({
        name: 'adaptive-card',
        description: 'Adaptive card response',
        data: 'DSP'
      });

      // Verify the correct defaults were used
      expect(mockInput).toHaveBeenCalledWith({
        message: 'Output name:',
        default: 'adaptive-card'
      });

      expect(mockInput).toHaveBeenCalledWith({
        message: 'Output description:',
        default: 'Adaptive card response'
      });
    });

    test('should use custom defaults when provided', async () => {
      mockInput
        .mockResolvedValueOnce('custom-output') // name
        .mockResolvedValueOnce('Custom output description'); // description

      const result = await promptOutputDetails({
        name: 'custom-output',
        description: 'Custom output description'
      });

      expect(result).toEqual({
        name: 'custom-output',
        description: 'Custom output description',
        data: 'DSP'
      });

      // Verify custom defaults were used
      expect(mockInput).toHaveBeenCalledWith({
        message: 'Output name:',
        default: 'custom-output'
      });

      expect(mockInput).toHaveBeenCalledWith({
        message: 'Output description:',
        default: 'Custom output description'
      });
    });
  });

  describe('getInputDescription', () => {
    test('should return correct descriptions for known data types', () => {
      expect(getInputDescription('DSP/Note')).toBe('Clinical Note generated by Dragon Copilot');
      expect(getInputDescription('DSP/IterativeTranscript')).toBe('Iterative transcript from Dragon Copilot');
      expect(getInputDescription('DSP/IterativeAudio')).toBe('Iterative audio from Dragon Copilot');
      expect(getInputDescription('DSP/Transcript')).toBe('Complete transcript from Dragon Copilot');
    });

    test('should return default description for unknown data types', () => {
      expect(getInputDescription('Unknown/Type')).toBe('Data from Dragon Copilot');
    });
  });
});
