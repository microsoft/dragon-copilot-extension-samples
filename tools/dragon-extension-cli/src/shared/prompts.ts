import { input, select, checkbox, confirm } from '@inquirer/prompts';
import { DragonExtensionManifest } from '../types.js';

export interface ExtensionDetails {
  name: string;
  description: string;
  version: string;
}

export interface ToolDetails {
  toolName: string;
  toolDescription: string;
  endpoint: string;
  inputTypes: string[];
  includeAdaptiveCard?: boolean;
}

export const INPUT_TYPE_CHOICES = [
  { name: 'Clinical Note (DSP/Note)', value: 'DSP/Note' },
  { name: 'Iterative Transcript (DSP/IterativeTranscript)', value: 'DSP/IterativeTranscript' },
  { name: 'Iterative Audio (DSP/IterativeAudio)', value: 'DSP/IterativeAudio' },
  { name: 'Transcript (DSP/Transcript)', value: 'DSP/Transcript' },
];

/**
 * Validates tool name input
 */
export function validateToolName(input: string, existingManifest?: DragonExtensionManifest | null): string | boolean {
  if (!input.trim()) return 'Tool name is required';
  if (!/^[a-z0-9-]+$/.test(input)) return 'Tool name must contain only lowercase letters, numbers, and hyphens';
  if (existingManifest?.tools.find(t => t.name === input)) {
    return 'Tool with this name already exists';
  }
  return true;
}

/**
 * Validates extension name input
 */
export function validateExtensionName(input: string): string | boolean {
  if (!input.trim()) return 'Extension name is required';
  if (!/^[a-z0-9-]+$/.test(input)) return 'Extension name must contain only lowercase letters, numbers, and hyphens';
  return true;
}

/**
 * Validates URL input
 */
export function validateUrl(input: string): string | boolean {
  try {
    new URL(input);
    return true;
  } catch {
    return 'Please enter a valid URL';
  }
}

/**
 * Validates version format (x.y.z)
 */
export function validateVersion(input: string): string | boolean {
  if (!/^\d+\.\d+\.\d+$/.test(input)) return 'Version must be in format x.y.z';
  return true;
}

/**
 * Prompts for extension details
 */
export async function promptExtensionDetails(defaults?: Partial<ExtensionDetails>): Promise<ExtensionDetails> {
  const name = await input({
    message: 'Extension name:',
    default: defaults?.name || 'my-dragon-extension',
    validate: validateExtensionName
  });

  const description = await input({
    message: 'Extension description:',
    default: defaults?.description || 'A Dragon Copilot extension'
  });

  const version = await input({
    message: 'Version:',
    default: defaults?.version || '0.0.1',
    validate: validateVersion
  });

  return { name, description, version };
}

/**
 * Prompts for tool details with configurable options
 */
export async function promptToolDetails(
  existingManifest?: DragonExtensionManifest | null,
  options?: {
    includeAdaptiveCardPrompt?: boolean;
    allowMultipleInputs?: boolean;
    defaults?: {
      toolName?: string;
      toolDescription?: string;
      endpoint?: string;
    };
  }
): Promise<ToolDetails> {
  const {
    includeAdaptiveCardPrompt = true,
    allowMultipleInputs = true,
    defaults = {}
  } = options || {};

  const toolName = await input({
    message: 'Tool name:',
    default: defaults.toolName,
    validate: (input: string) => validateToolName(input, existingManifest)
  });

  const toolDescription = await input({
    message: 'Tool description:',
    default: defaults.toolDescription
  });

  const endpoint = await input({
    message: 'API endpoint:',
    default: defaults.endpoint,
    validate: validateUrl
  });

  const inputTypes = await checkbox({
    message: allowMultipleInputs ? 'Select input data types:' : 'Select primary input data type:',
    choices: INPUT_TYPE_CHOICES,
    validate: (choices) => {
      if (choices.length === 0) return 'Please select at least one input type';
      if (!allowMultipleInputs && choices.length > 1) {
        return 'Please select only one input type';
      }
      return true;
    }
  });

  let includeAdaptiveCard = true;
  if (includeAdaptiveCardPrompt) {
    includeAdaptiveCard = await confirm({
      message: 'Include Adaptive Card output?',
      default: true
    });
  }

  return { toolName, toolDescription, endpoint, inputTypes, includeAdaptiveCard };
}

/**
 * Gets description for a given data type
 */
export function getInputDescription(dataType: string): string {
  switch (dataType) {
    case 'DSP/Note':
      return 'Clinical Note generated by Dragon Copilot';
    case 'DSP/IterativeTranscript':
      return 'Iterative transcript from Dragon Copilot';
    case 'DSP/IterativeAudio':
      return 'Iterative audio from Dragon Copilot';
    case 'DSP/Transcript':
      return 'Complete transcript from Dragon Copilot';
    default:
      return 'Data from Dragon Copilot';
  }
}
