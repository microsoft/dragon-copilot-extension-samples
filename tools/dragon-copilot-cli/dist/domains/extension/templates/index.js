const templates = {
    'note-analysis': {
        manifestVersion: 3,
        name: 'my-note-analysis-extension',
        description: 'Provides note analysis',
        version: '0.0.1',
        tools: [
            {
                name: 'note-analyzer',
                description: 'Provides analysis of a note',
                endpoint: 'https://publisher.example.com/note-analysis',
                inputs: [
                    {
                        name: 'note',
                        description: 'Clinical Note generated by dragon copilot',
                        data: 'DSP/Note'
                    }
                ],
                outputs: [
                    {
                        name: 'coded-note-analysis-results',
                        description: 'Note analysis results in coded format',
                        data: 'DSP'
                    },
                    {
                        name: 'note-analysis-results-adaptive-card',
                        description: 'Note analysis results in Adaptive Card format',
                        data: 'DSP'
                    }
                ]
            }
        ],
        automationScripts: [
            {
                name: 'analyze-note-script',
                description: 'Analyzes a clinical note and emits insights',
                entryPoint: 'scripts/analyze-note/index.js',
                runtime: 'nodejs18',
                timeoutSeconds: 120
            }
        ],
        eventTriggers: [
            {
                name: 'note-created-trigger',
                description: 'Runs analysis when a new clinical note is drafted',
                eventType: 'note.created',
                scriptName: 'analyze-note-script'
            }
        ],
        dependencies: [
            {
                name: 'clinical-terminology-service',
                version: '1.0.0',
                type: 'service'
            }
        ]
    },
    'speech-analysis': {
        manifestVersion: 3,
        name: 'my-speech-extension',
        description: 'Provides speech analysis',
        version: '0.0.1',
        tools: [
            {
                name: 'speech-analysis',
                description: 'Provides analysis of iterative speech',
                endpoint: 'https://publisher.example.com/speech-analysis',
                inputs: [
                    {
                        name: 'iterative-transcript',
                        description: 'Iterative transcript',
                        data: 'DSP/IterativeTranscript'
                    },
                    {
                        name: 'iterative-audio',
                        description: 'Iterative audio',
                        data: 'DSP/IterativeAudio'
                    }
                ],
                outputs: [
                    {
                        name: 'speech-analysis-results-adaptive-card',
                        description: 'Speech analysis results in Adaptive Card format',
                        data: 'DSP'
                    },
                    {
                        name: 'coded-speech-analysis-results',
                        description: 'Speech analysis results in coded format',
                        data: 'DSP'
                    }
                ]
            }
        ],
        automationScripts: [
            {
                name: 'speech-monitor-script',
                description: 'Processes speech data for trends and alerts',
                entryPoint: 'scripts/speech-monitor/index.js',
                runtime: 'nodejs18'
            }
        ],
        eventTriggers: [
            {
                name: 'iterative-transcript-received',
                description: 'Executes when new iterative transcript data arrives',
                eventType: 'iterativeTranscript.received',
                scriptName: 'speech-monitor-script'
            }
        ]
    }
};
export function getTemplate(templateName) {
    const template = templates[templateName];
    if (!template) {
        throw new Error(`Template '${templateName}' not found. Available templates: ${Object.keys(templates).join(', ')}`);
    }
    return template;
}
export function listTemplates() {
    return Object.keys(templates);
}
//# sourceMappingURL=index.js.map